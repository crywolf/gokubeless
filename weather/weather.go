package kubeless

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/kubeless/kubeless/pkg/functions"
)

// struct generated by https://mholt.github.io/json-to-go/
type JSONdata struct {
	Query struct {
		Count   int       `json:"count"`
		Created time.Time `json:"created"`
		Lang    string    `json:"lang"`
		Results struct {
			Channel struct {
				Item struct {
					Condition struct {
						Code string `json:"code"`
						Date string `json:"date"`
						Temp string `json:"temp"`
						Text string `json:"text"`
					} `json:"condition"`
				} `json:"item"`
			} `json:"channel"`
		} `json:"results"`
	} `json:"query"`
}

func Handler(event functions.Event, context functions.Context) (string, error) {
	location := event.Data
	q := `select item.condition from weather.forecast where woeid in (select woeid from geo.places(1) where text="` + location + `") and u="c"&format=json`
	uri := `https://query.yahooapis.com/v1/public/yql?q=` + url.PathEscape(q)

	resp, err := http.Get(uri)
	if err != nil {
		return "", fmt.Errorf("error calling external service API: %v", err)
	}
	if resp.StatusCode != 200 {
		return "", fmt.Errorf("error calling external service API: %s", resp.Status)
	}
	defer resp.Body.Close()

	dec := json.NewDecoder(resp.Body)

	var data JSONdata
	var temp, text string

	for {
		if err := dec.Decode(&data); err == io.EOF {
			break
		} else if err != nil {
			return "", fmt.Errorf("error decoding JSON respose: %v", err)
		}
	}

	result := data.Query.Results.Channel.Item.Condition
	temp, text = result.Temp, result.Text

	output := fmt.Sprintf("It is %s Â°C degrees in %s and %s", temp, location, strings.ToLower(text))
	return output, nil
}
